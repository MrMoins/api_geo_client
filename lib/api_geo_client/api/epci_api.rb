=begin
#API Géo

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.35
=end

module ApiGeoClient
  class EPCIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Renvoi les communes d'un EPCI
    # @param code Code de l&#x27;EPCI
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @option opts [String] :format Format de réponse attendu (default to json)
    # @option opts [String] :geometry Géométrie à utiliser pour la sortie géographique (default to centre)
    # @return [Array<Commune>]
    def epcis_code_communes_get(code, opts = {})
      data, _status_code, _headers = epcis_code_communes_get_with_http_info(code, opts)
      data
    end

    # Renvoi les communes d&#x27;un EPCI
    # @param code Code de l&#x27;EPCI
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @option opts [String] :format Format de réponse attendu
    # @option opts [String] :geometry Géométrie à utiliser pour la sortie géographique
    # @return [Array<(Array<Commune>, Integer, Hash)>] Array<Commune> data, response status code and response headers
    def epcis_code_communes_get_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EPCIApi.epcis_code_communes_get ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling EPCIApi.epcis_code_communes_get"
      end
      if @api_client.config.client_side_validation && opts[:'fields'] && !opts[:'fields'].all? { |item| ['nom', 'code', 'codesPostaux', 'siren', 'centre', 'surface', 'contour', 'mairie', 'bbox', 'codeEpci', 'epci', 'codeDepartement', 'departement', 'codeRegion', 'region', 'population', 'zone'].include?(item) }
        fail ArgumentError, 'invalid value for "fields", must include one of nom, code, codesPostaux, siren, centre, surface, contour, mairie, bbox, codeEpci, epci, codeDepartement, departement, codeRegion, region, population, zone'
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['json', 'geojson'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of json, geojson'
      end
      if @api_client.config.client_side_validation && opts[:'geometry'] && !['centre', 'contour', 'mairie', 'bbox'].include?(opts[:'geometry'])
        fail ArgumentError, 'invalid value for "geometry", must be one of centre, contour, mairie, bbox'
      end
      # resource path
      local_var_path = '/epcis/{code}/communes'.sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :csv) if !opts[:'fields'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'geometry'] = opts[:'geometry'] if !opts[:'geometry'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Commune>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EPCIApi#epcis_code_communes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Récupérer les informations concernant un EPCI
    # @param code Code INSEE de l&#x27;EPCI
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @option opts [String] :format Format de réponse attendu (default to json)
    # @option opts [String] :geometry Géométrie à utiliser pour la sortie géographique (default to centre)
    # @return [Epci]
    def epcis_code_get(code, opts = {})
      data, _status_code, _headers = epcis_code_get_with_http_info(code, opts)
      data
    end

    # Récupérer les informations concernant un EPCI
    # @param code Code INSEE de l&#x27;EPCI
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @option opts [String] :format Format de réponse attendu
    # @option opts [String] :geometry Géométrie à utiliser pour la sortie géographique
    # @return [Array<(Epci, Integer, Hash)>] Epci data, response status code and response headers
    def epcis_code_get_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EPCIApi.epcis_code_get ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling EPCIApi.epcis_code_get"
      end
      if @api_client.config.client_side_validation && opts[:'fields'] && !opts[:'fields'].all? { |item| ['nom', 'code', 'population', 'financement', 'type', 'codesRegions', 'codesDepartements', 'centre', 'surface', 'contour', 'bbox', 'zone'].include?(item) }
        fail ArgumentError, 'invalid value for "fields", must include one of nom, code, population, financement, type, codesRegions, codesDepartements, centre, surface, contour, bbox, zone'
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['json', 'geojson'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of json, geojson'
      end
      if @api_client.config.client_side_validation && opts[:'geometry'] && !['centre', 'contour', 'bbox'].include?(opts[:'geometry'])
        fail ArgumentError, 'invalid value for "geometry", must be one of centre, contour, bbox'
      end
      # resource path
      local_var_path = '/epcis/{code}'.sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :csv) if !opts[:'fields'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'geometry'] = opts[:'geometry'] if !opts[:'geometry'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Epci' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EPCIApi#epcis_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Recherche des EPCI
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nom Nom de l&#x27;EPCI
    # @option opts [String] :boost Mode de boost de la recherche par nom
    # @option opts [String] :code_epci Code de l&#x27;EPCI associé
    # @option opts [String] :code_departement Code du département associé
    # @option opts [String] :code_region Code de la région associée
    # @option opts [Array<String>] :zone Zone permettant de filtrer à la métropole, aux DROM et aux COM. Défaut à metro,drom sauf pour les communes à metro,drom,com pour conserver le comportement historique.
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @option opts [String] :format Format de réponse attendu (default to json)
    # @option opts [String] :geometry Géométrie à utiliser pour la sortie géographique (default to centre)
    # @return [Array<Epci>]
    def epcis_get(opts = {})
      data, _status_code, _headers = epcis_get_with_http_info(opts)
      data
    end

    # Recherche des EPCI
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nom Nom de l&#x27;EPCI
    # @option opts [String] :boost Mode de boost de la recherche par nom
    # @option opts [String] :code_epci Code de l&#x27;EPCI associé
    # @option opts [String] :code_departement Code du département associé
    # @option opts [String] :code_region Code de la région associée
    # @option opts [Array<String>] :zone Zone permettant de filtrer à la métropole, aux DROM et aux COM. Défaut à metro,drom sauf pour les communes à metro,drom,com pour conserver le comportement historique.
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @option opts [String] :format Format de réponse attendu
    # @option opts [String] :geometry Géométrie à utiliser pour la sortie géographique
    # @return [Array<(Array<Epci>, Integer, Hash)>] Array<Epci> data, response status code and response headers
    def epcis_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EPCIApi.epcis_get ...'
      end
      if @api_client.config.client_side_validation && opts[:'zone'] && !opts[:'zone'].all? { |item| ['metro', 'drom', 'com'].include?(item) }
        fail ArgumentError, 'invalid value for "zone", must include one of metro, drom, com'
      end
      if @api_client.config.client_side_validation && opts[:'fields'] && !opts[:'fields'].all? { |item| ['nom', 'code', 'population', 'financement', 'type', 'codesRegions', 'codesDepartements', 'centre', 'surface', 'contour', 'bbox', 'zone'].include?(item) }
        fail ArgumentError, 'invalid value for "fields", must include one of nom, code, population, financement, type, codesRegions, codesDepartements, centre, surface, contour, bbox, zone'
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['json', 'geojson'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of json, geojson'
      end
      if @api_client.config.client_side_validation && opts[:'geometry'] && !['centre', 'contour', 'bbox'].include?(opts[:'geometry'])
        fail ArgumentError, 'invalid value for "geometry", must be one of centre, contour, bbox'
      end
      # resource path
      local_var_path = '/epcis'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nom'] = opts[:'nom'] if !opts[:'nom'].nil?
      query_params[:'boost'] = opts[:'boost'] if !opts[:'boost'].nil?
      query_params[:'codeEpci'] = opts[:'code_epci'] if !opts[:'code_epci'].nil?
      query_params[:'codeDepartement'] = opts[:'code_departement'] if !opts[:'code_departement'].nil?
      query_params[:'codeRegion'] = opts[:'code_region'] if !opts[:'code_region'].nil?
      query_params[:'zone'] = @api_client.build_collection_param(opts[:'zone'], :csv) if !opts[:'zone'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :csv) if !opts[:'fields'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'geometry'] = opts[:'geometry'] if !opts[:'geometry'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Epci>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EPCIApi#epcis_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
