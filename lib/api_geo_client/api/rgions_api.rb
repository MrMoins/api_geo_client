=begin
#API Géo

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.35
=end

module ApiGeoClient
  class RgionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Renvoi les départements d'une région
    # @param code Code de la région
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @return [Array<Departement>]
    def regions_code_departements_get(code, opts = {})
      data, _status_code, _headers = regions_code_departements_get_with_http_info(code, opts)
      data
    end

    # Renvoi les départements d&#x27;une région
    # @param code Code de la région
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @return [Array<(Array<Departement>, Integer, Hash)>] Array<Departement> data, response status code and response headers
    def regions_code_departements_get_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RgionsApi.regions_code_departements_get ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling RgionsApi.regions_code_departements_get"
      end
      if @api_client.config.client_side_validation && opts[:'fields'] && !opts[:'fields'].all? { |item| ['nom', 'code', 'zone'].include?(item) }
        fail ArgumentError, 'invalid value for "fields", must include one of nom, code, zone'
      end
      # resource path
      local_var_path = '/regions/{code}/departements'.sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :csv) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Departement>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RgionsApi#regions_code_departements_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Récupérer les informations concernant une région
    # @param code Code de la région
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @return [Region]
    def regions_code_get(code, opts = {})
      data, _status_code, _headers = regions_code_get_with_http_info(code, opts)
      data
    end

    # Récupérer les informations concernant une région
    # @param code Code de la région
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @return [Array<(Region, Integer, Hash)>] Region data, response status code and response headers
    def regions_code_get_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RgionsApi.regions_code_get ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling RgionsApi.regions_code_get"
      end
      if @api_client.config.client_side_validation && opts[:'fields'] && !opts[:'fields'].all? { |item| ['nom', 'code', 'zone'].include?(item) }
        fail ArgumentError, 'invalid value for "fields", must include one of nom, code, zone'
      end
      # resource path
      local_var_path = '/regions/{code}'.sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :csv) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Region' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RgionsApi#regions_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Recherche des régions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Code de la région
    # @option opts [String] :nom Nom de la région
    # @option opts [Array<String>] :zone Zone permettant de filtrer à la métropole, aux DROM et aux COM. Défaut à metro,drom sauf pour les communes à metro,drom,com pour conserver le comportement historique.
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @return [Array<Region>]
    def regions_get(opts = {})
      data, _status_code, _headers = regions_get_with_http_info(opts)
      data
    end

    # Recherche des régions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Code de la région
    # @option opts [String] :nom Nom de la région
    # @option opts [Array<String>] :zone Zone permettant de filtrer à la métropole, aux DROM et aux COM. Défaut à metro,drom sauf pour les communes à metro,drom,com pour conserver le comportement historique.
    # @option opts [Array<String>] :fields Liste des champs souhaités dans la réponse
    # @return [Array<(Array<Region>, Integer, Hash)>] Array<Region> data, response status code and response headers
    def regions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RgionsApi.regions_get ...'
      end
      if @api_client.config.client_side_validation && opts[:'zone'] && !opts[:'zone'].all? { |item| ['metro', 'drom', 'com'].include?(item) }
        fail ArgumentError, 'invalid value for "zone", must include one of metro, drom, com'
      end
      if @api_client.config.client_side_validation && opts[:'fields'] && !opts[:'fields'].all? { |item| ['nom', 'code', 'zone'].include?(item) }
        fail ArgumentError, 'invalid value for "fields", must include one of nom, code, zone'
      end
      # resource path
      local_var_path = '/regions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'nom'] = opts[:'nom'] if !opts[:'nom'].nil?
      query_params[:'zone'] = @api_client.build_collection_param(opts[:'zone'], :csv) if !opts[:'zone'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :csv) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<Region>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RgionsApi#regions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
